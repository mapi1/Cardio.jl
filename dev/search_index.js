var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Cardio","category":"page"},{"location":"#Cardio","page":"Home","title":"Cardio","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Cardio]","category":"page"},{"location":"#Cardio.adaptive_hrv_filter-Tuple{Array{var\"#s16\",1} where var\"#s16\"<:Real}","page":"Home","title":"Cardio.adaptive_hrv_filter","text":"adaptivehrvfilter(signal::Vector{<:Real}; removeoutliers::Bool = true, replacenonnormal::Bool = true, adaptivecontrollingcoef::Real = 0.05, proportionalitylimit::Real = 10/100, outlierminzfactor::Real = 3, maxexcesshrv::Real = 20, physiologicalvalues::Tuple{Real, Real} = (200, 2000))\n\nAn addaptive filter for HRV data      Based on: Wessel, N., Voss, A., Malberg, H., Ziehmann, Ch.,          Voss, H. U., Schirdewan, A., Meyerfeldt, U.,Kurths, J.:          Nonlinear analysis of complex phenomena in cardiological data,          Herzschr. Elektrophys., 11(3), 2000, 159-173, doi:10.1007/s003990070035.\n\nFilters out unphysiological beats in the RR series with the ability to replace them.\n\nArgs:\n\n'signal::Vector': HRV in ms\n\nKeyword Args\n\n'remove_outliers::Bool = true': option if non physiological outliers shall be removed\n'replace_nonnormal::Bool = true': if true, non normal HRV values are replaced\n'adaptivecontrollingcoef::Real = 0.05': ???\n'proportionality_limit::Real = 10/100': ???\n'outlierminzfactor::Real = 3': ???\n'maxexcesshrv::Real = 20': ???\n'physiological_values::Tuple{Real, Real} = (200, 2000)': Definition of the physiological values, scheme: (min, max)\n\nReturn\n\nReturn value depends on keyword args\n\njulia> adaptive_hrv_filter(signal)\n\n\n\n\n\n","category":"method"},{"location":"#Cardio.detectRPeaks-Tuple{Array{var\"#s19\",1} where var\"#s19\"<:Real,Real}","page":"Home","title":"Cardio.detectRPeaks","text":"detectRPeaks(ecg::Vector{<:Number}, samplerate::Number)\n\nTODO check minDist Find R peaks in ECG signals as specified by Benitez et al. See http://dx.doi.org/10.1016/S0010-4825(01)00009-9 for more information\n\nArgs:\n\n'ecg::Vector{<:Real}': ECG data\n'samplerate::Real': Sampling rate [Hz]\n'minPeakDist::Real': minimum distance between consecutive peaks [s]\n\nReturn:\n\n'res::Vector{Int64}': Vector containing the position of the R peaks in ecg, divide by samplerate to get values in a time base\n\nExamples\n\njulia> a = detectRPeaks(ecg, fs)\nVector{Int64} with ....\n\n\n\n\n\n","category":"method"},{"location":"#Cardio.detrend-Tuple{Array{var\"#s20\",1} where var\"#s20\"<:Real}","page":"Home","title":"Cardio.detrend","text":"detrend(signal::Vector{<:Real}; p::Int = 1, coefs::Union{Vector{<:Real}, Nothing, Real} = nothing, return_coefs::Bool = false)\n\nDetrend a signal by removing polynomial trend of order p using build in least squares. Choose p = 0 to remove only mean or input coefficents from previous detrending to detrend by those.\n\nArgs:\n\nsignal::Vector: Data Vector containing te signal\np::Int: order of polynomial\ncoefs::Union{Vector{<:Real}, Nothing, Real}: Coefficents to do the same detrending on different signal\nreturn_coefs::Bool: if true returns coeficients detrendet by\n\nReturn:\n\nnewSignal: The detrended sigal\nOr if return_coefs = true:\n(newSignal, coefs): The detrended sigal and the estimated coefficents from order 0 to  p\n\nExamples\n\njulia> signal = sin.([1:100;]) + 0.03 .* [1:100;]\njulia> detrend(signal)\nVector{Float}\n\n\n\n\n\n","category":"method"}]
}
